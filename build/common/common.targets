<Project ToolsVersion="15.0">
  <!-- Compiler flags -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net46' ">
    <DefineConstants>$(DefineConstants);IS_DESKTOP</DefineConstants>
    <IsDesktop>true</IsDesktop>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp1.0' OR '$(TargetFramework)' == 'netstandard1.3' ">
    <DefineConstants>$(DefineConstants);IS_CORECLR</DefineConstants>
    <IsCore>true</IsCore>
  </PropertyGroup>

  <!-- Symbols -->
  <ItemGroup Condition=" '$(PackProject)' == 'true' AND '$(SkipSourceLink)' != 'true' ">
    <PackageReference Include="SourceLink.Create.GitHub" Version="2.0.2" PrivateAssets="all" />
    <DotNetCliToolReference Include="dotnet-sourcelink-git" Version="2.0.2" />
    <DotNetCliToolReference Include="dotnet-sourcelink" Version="2.0.2" />
  </ItemGroup>

  <!-- Nupkg -->
  <PropertyGroup Condition=" '$(PackProject)' == 'true' AND '$(SkipDocs)' != 'true' ">
    <GenerateDocumentationFile Condition=" '$(GenerateDocumentationFile)' == '' " >true</GenerateDocumentationFile>
    <NoWarn>1591;1573</NoWarn>
  </PropertyGroup>

  <!-- Create nupkg hook -->
  <PropertyGroup Condition=" '$(PackProject)' == 'true' ">
    <IsPackable>true</IsPackable>
    <IncludeSymbols Condition=" '$(IncludeSymbols)' == '' ">true</IncludeSymbols>
    <PackageOutputPath>$(ArtifactsDirectory)</PackageOutputPath>
    <NoPackageAnalysis>true</NoPackageAnalysis>
  </PropertyGroup>

  <!-- Version -->
  <PropertyGroup>
    <ApplyBuildNumber Condition=" '$(ApplyBuildNumber)' == '' ">true</ApplyBuildNumber>
    <BuildNumber Condition=" '$(BuildNumber)' == '' ">$([System.DateTime]::UtcNow.Year).$([System.DateTime]::UtcNow.Month).$([System.DateTime]::UtcNow.Day).$([System.DateTime]::UtcNow.Hour).$([System.DateTime]::UtcNow.Minute)</BuildNumber>
    <Version>$(StableVersion)</Version>
    <Version Condition=" '$(ReleaseLabel)' != '' ">$(Version)-$(ReleaseLabel)</Version>
    <Version Condition=" '$(ReleaseLabel)' != '' AND '$(ApplyBuildNumber)' == 'true' ">$(Version).$(BuildNumber)</Version>
  </PropertyGroup>

  <!-- Test projects -->
  <PropertyGroup Condition=" '$(TestProject)' == 'true' ">
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
    <OutputType>Exe</OutputType>
  </PropertyGroup>

  <ItemGroup Condition=" '$(TestProject)' == 'true' ">
    <None Include="$(BuildCommonDirectory)TestShared\xunit.runner.json">
      <Link>xunit.runner.json</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <Compile Include="$(BuildCommonDirectory)TestShared\*.cs" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TestProject)' == 'true' ">
    <PackageReference Include="FluentAssertions" Version="$(FluentAssertionsVersion)" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="$(TestSDKVersion)" />
    <PackageReference Include="xunit.runner.visualstudio" Version="$(XunitVersion)" />
    <PackageReference Include="xunit" Version="$(XunitVersion)" />
  </ItemGroup>

  <!--
    ============================================================
    PackProjects
    ============================================================
  -->
  <Target Name="PackProjects" Condition=" '$(PackProject)' == 'true' ">
    <Message Text="Packing $(ProjectName)" Importance="high" />

    <!-- Run pack on the project -->
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="Pack"
      Properties="Configuration=$(Configuration);
                  VisualStudioVersion=$(VisualStudioVersion);
                  PackageOutputPath=$(NupkgOutputDirectory);
                  NoPackageAnalysis=true;
                  IncludeSymbols=true;
                  IsPackable=true;
                  GenerateDocsForPack=true">
    </MSBuild>
  </Target>

  <!--
    ============================================================
    RunTests for the current project
    Top level entry point for tests
    ============================================================
  -->
  <Target Name="RunTests"
          DependsOnTargets="Build;GetTargetFrameworkSet"
          Condition=" '$(TestProject)' == 'true' AND '$(SkipTests)' != 'true' ">
    <Message Text="Running tests for $(ProjectName)" Importance="high" />

    <!-- Execute tests for each framework -->
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="RunTestsInner"
      Properties="TargetFramework=%(ProjectTargetFrameworkEntries.Identity);
                  Configuration=$(Configuration);
                  VisualStudioVersion=$(VisualStudioVersion);">
    </MSBuild>
  </Target>

  <!--
    ============================================================
    RunTests for the current framework
    Called by RunTests, this calls XUnit
    ============================================================
  -->
  <Target Name="RunTestsInner">
    <PropertyGroup>
      <TestAssemblyPath>$(OutputPath)$(AssemblyName).exe</TestAssemblyPath>
    </PropertyGroup>
    <Message Text="Running tests on $(TestAssemblyPath)" Importance="high" />

    <!-- Ensure the test results dir exists -->
    <MakeDir Directories="$(TestResultsDirectory)"
      Condition=" '$(IsDesktop)' == 'true' AND '$(SkipDesktopTests)' != 'true' " />

    <!-- For desktop frameworks use the console runner -->
    <Exec Command="$(XunitConoleExePath) $(TestAssemblyPath) -html $(TestResultsDirectory)$(ProjectName).VS$(VisualStudioVersion).html"
          Condition=" '$(IsDesktop)' == 'true' AND '$(SkipDesktopTests)' != 'true' " />

    <!-- For other frameworks call dotnet test -->
    <Exec Command="$(DotnetExePath) test -f $(TargetFramework) --no-build -c $(Configuration)"
          Condition=" '$(IsDesktop)' != 'true' AND '$(SkipCoreTests)' != 'true' " />
  </Target>

  <!--
    ============================================================
    GetTestAssemblies
    ============================================================
  -->
  <Target Name="GetTestAssemblies"
          DependsOnTargets="Build;GetTargetFrameworkSet"
          Condition=" '$(TestProject)' == 'true' AND '$(SkipTests)' != 'true' "
          Returns="@(TestAssemblyPath)">
    <Message Text="Discovering test assemblies for $(AssemblyName)" Importance="high" />

    <!-- Execute find for all frameworks -->
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="GetTestAssembliesInner"
      Properties="TargetFramework=%(ProjectTargetFrameworkEntries.Identity);
                  Configuration=$(Configuration);
                  VisualStudioVersion=$(VisualStudioVersion);">
      <Output TaskParameter="TargetOutputs"
              ItemName="TestAssemblyPath" />
    </MSBuild>
  </Target>

  <!--
    ============================================================
    GetTestAssembliesInner
    ============================================================
  -->
  <Target Name="GetTestAssembliesInner"
          Returns="@(TestAssemblyPath)">

    <PropertyGroup>
      <TestAssemblyRelativePath Condition=" '$(IsDesktop)' == 'true' ">$(OutputPath)$(AssemblyName).exe</TestAssemblyRelativePath>
      <TestAssemblyRelativePath Condition=" '$(IsDesktop)' != 'true' ">$(OutputPath)$(AssemblyName).dll</TestAssemblyRelativePath>
    </PropertyGroup>

    <ConvertToAbsolutePath Paths="$(TestAssemblyRelativePath)">
      <Output TaskParameter="AbsolutePaths" PropertyName="AbsoluteTestAssemblyPath"/>
    </ConvertToAbsolutePath>

    <ItemGroup>
      <TestAssemblyPath Include="$(AbsoluteTestAssemblyPath)">
        <IsDesktop Condition=" '$(IsDesktop)' == 'true' ">true</IsDesktop>
        <IsCore Condition=" '$(IsDesktop)' != 'true' ">true</IsCore>
      </TestAssemblyPath>
    </ItemGroup>
  </Target>

  <!--
    ============================================================
    GetTargetFrameworkSet get all target frameworks
    ============================================================
  -->
  <Target Name="GetTargetFrameworkSet" Returns="@(ProjectTargetFrameworkEntries)">
    <!-- Find all frameworks to run on -->
    <ItemGroup>
      <ProjectTargetFrameworkEntries Include="$(TargetFramework);$(TargetFrameworks)" />
    </ItemGroup>
  </Target>
</Project>